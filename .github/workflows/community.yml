name: 📈 Community Metrics

on:
  schedule:
    # Run weekly on Sundays at 10 AM UTC
    - cron: "0 10 * * 0"
  issues:
    types: [opened]
  workflow_dispatch:

jobs:
  # 📊 Community Health Metrics
  community_metrics:
    name: 📊 Community Health
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      issues: read
      pull-requests: read

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Generate community metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const since = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();

            // Get issues and PRs from the last week
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              since,
              per_page: 100
            });

            const thisWeek = {
              issues: issues.data.filter(i => !i.pull_request),
              prs: issues.data.filter(i => i.pull_request),
              contributors: new Set()
            };

            // Count contributors
            thisWeek.issues.forEach(i => thisWeek.contributors.add(i.user.login));
            thisWeek.prs.forEach(pr => thisWeek.contributors.add(pr.user.login));

            // Get repository stats
            const repo_data = await github.rest.repos.get({ owner, repo });

            // Generate summary
            const summary = `
            ## 📈 Weekly Community Report

            ### 📊 Repository Stats
            - ⭐ **Stars**: ${repo_data.data.stargazers_count}
            - 🍴 **Forks**: ${repo_data.data.forks_count}
            - 👀 **Watchers**: ${repo_data.data.watchers_count}
            - 🐛 **Open Issues**: ${repo_data.data.open_issues_count}

            ### 📅 This Week's Activity
            - 🆕 **New Issues**: ${thisWeek.issues.filter(i => i.state === 'open').length}
            - ✅ **Closed Issues**: ${thisWeek.issues.filter(i => i.state === 'closed').length}
            - 🔄 **New PRs**: ${thisWeek.prs.filter(pr => pr.state === 'open').length}
            - ✨ **Merged PRs**: ${thisWeek.prs.filter(pr => pr.state === 'closed').length}
            - 👥 **Active Contributors**: ${thisWeek.contributors.size}

            ### 🏷️ Issue Breakdown
            `;

            console.log(summary);

            // Add to step summary
            await core.summary
              .addRaw(summary)
              .write();

  # 🏷️ Auto Label Issues
  auto_label:
    name: 🏷️ Auto Label Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    permissions:
      contents: read
      issues: write

    steps:
      - name: 🏷️ Auto-assign labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body.toLowerCase();

            const labels = [];

            // Auto-label based on title and content
            if (title.includes('bug') || title.includes('error') || title.includes('fail')) {
              labels.push('bug');
            }

            if (title.includes('feature') || title.includes('enhancement')) {
              labels.push('enhancement');
            }

            if (title.includes('device') || body.includes('scale model') || body.includes('vid/pid')) {
              labels.push('device-support');
            }

            if (title.includes('doc') || title.includes('readme')) {
              labels.push('documentation');
            }

            if (title.includes('question') || title.includes('help')) {
              labels.push('question');
            }

            // Performance related
            if (body.includes('slow') || body.includes('performance') || body.includes('memory')) {
              labels.push('performance');
            }

            // Priority based on keywords
            if (title.includes('critical') || title.includes('urgent') || body.includes('blocking')) {
              labels.push('priority-high');
            }

            // Add platform labels
            if (body.includes('android')) {
              labels.push('platform-android');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issue.number,
                labels
              });
            }

  # 🤖 Stale Issue Management
  stale_management:
    name: 🤖 Stale Issues
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: 🤖 Mark stale issues and PRs
        uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

          # Issue settings
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had recent activity. 

            It will be closed if no further activity occurs within 7 days. 

            If this issue is still relevant, please:
            - Add a comment to keep it open
            - Provide additional information if requested
            - Update to the latest version and retest

            Thank you for your contributions! 🙏
          close-issue-message: |
            This issue has been automatically closed due to inactivity.

            If you believe this issue is still relevant, please reopen it with:
            - Updated information
            - Current version details
            - Recent testing results

            Thank you for your understanding! 🙏
          days-before-stale: 30
          days-before-close: 7
          stale-issue-label: "stale"

          # PR settings
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had recent activity.

            It will be closed if no further activity occurs within 14 days.

            If this PR is still relevant, please:
            - Rebase on the latest main branch
            - Address any review comments
            - Add tests if missing

            Thank you for your contribution! 🙏
          close-pr-message: |
            This pull request has been automatically closed due to inactivity.

            If you'd like to continue this work, please:
            - Open a new PR with updated code
            - Reference this PR in the description
            - Ensure all tests pass

            Thank you for your contribution! 🙏
          days-before-pr-stale: 60
          days-before-pr-close: 14
          stale-pr-label: "stale"

          # Exemptions
          exempt-issue-labels: "pinned,security,good-first-issue,help-wanted"
          exempt-pr-labels: "pinned,security,work-in-progress"

  # 📊 Monthly Report
  monthly_report:
    name: 📊 Monthly Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 10 1 * *' # First day of month
    permissions:
      contents: read
      issues: read
      pull-requests: read

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Generate monthly report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            const since = lastMonth.toISOString();

            // Get all activity from last month
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              since,
              per_page: 100
            });

            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 10
            });

            const lastMonthReleases = releases.data.filter(r => 
              new Date(r.created_at) > lastMonth
            );

            const monthlyStats = {
              issues: issues.data.filter(i => !i.pull_request),
              prs: issues.data.filter(i => i.pull_request),
              releases: lastMonthReleases,
              contributors: new Set()
            };

            // Count unique contributors
            monthlyStats.issues.forEach(i => monthlyStats.contributors.add(i.user.login));
            monthlyStats.prs.forEach(pr => monthlyStats.contributors.add(pr.user.login));

            const report = `
            # 📊 Monthly Community Report - ${lastMonth.toLocaleString('default', { month: 'long', year: 'numeric' })}

            ## 🎯 Highlights
            - 🆕 **New Issues**: ${monthlyStats.issues.filter(i => i.state === 'open').length}
            - ✅ **Resolved Issues**: ${monthlyStats.issues.filter(i => i.state === 'closed').length}
            - 🔄 **Pull Requests**: ${monthlyStats.prs.length}
            - 🚀 **Releases**: ${monthlyStats.releases.length}
            - 👥 **Contributors**: ${monthlyStats.contributors.size}

            ## 📈 Growth Metrics
            - Repository activity shows ${monthlyStats.issues.length + monthlyStats.prs.length} total interactions
            - Community engagement: ${monthlyStats.contributors.size} unique contributors

            ## 🎉 Thank You!
            Special thanks to all contributors who helped make this month successful!

            ---
            *This report was automatically generated*
            `;

            console.log(report);

            // Create issue with monthly report
            await github.rest.issues.create({
              owner,
              repo,
              title: `📊 Monthly Report - ${lastMonth.toLocaleString('default', { month: 'long', year: 'numeric' })}`,
              body: report,
              labels: ['monthly-report', 'community']
            });
