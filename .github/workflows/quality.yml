name: 📊 Quality Metrics

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run quality analysis daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.27.0"

jobs:
  # 📊 Code Quality Analysis
  code_quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 📊 Generate code metrics
        run: |
          echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count lines of code
          LOC=$(find lib -name "*.dart" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "📝 **Lines of Code**: $LOC" >> $GITHUB_STEP_SUMMARY

          # Count files
          FILES=$(find lib -name "*.dart" | wc -l)
          echo "📁 **Dart Files**: $FILES" >> $GITHUB_STEP_SUMMARY

          # Count test files
          TEST_FILES=$(find test -name "*.dart" 2>/dev/null | wc -l || echo "0")
          echo "🧪 **Test Files**: $TEST_FILES" >> $GITHUB_STEP_SUMMARY

          # Calculate test to code ratio
          if [ $FILES -gt 0 ]; then
            RATIO=$(echo "scale=2; $TEST_FILES / $FILES" | bc -l)
            echo "📈 **Test Coverage Ratio**: ${RATIO}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Run comprehensive analysis
        run: |
          flutter analyze --write=analysis_output.txt

          # Count issues by severity
          ERRORS=$(grep -c "error •" analysis_output.txt || echo "0")
          WARNINGS=$(grep -c "warning •" analysis_output.txt || echo "0")
          INFOS=$(grep -c "info •" analysis_output.txt || echo "0")

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Errors**: $ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Warnings**: $WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ **Info**: $INFOS" >> $GITHUB_STEP_SUMMARY

  # 🧪 Test Coverage Analysis
  test_coverage:
    name: 🧪 Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🧪 Run tests with coverage
        run: flutter test --coverage

      - name: 📊 Generate coverage report
        run: |
          # Install lcov for coverage processing
          sudo apt-get update
          sudo apt-get install -y lcov

          # Generate HTML coverage report
          genhtml coverage/lcov.info -o coverage/html

          # Extract coverage percentage
          COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep -E "lines......: [0-9.]+%" | awk '{print $2}')

          echo "## 🧪 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Overall Coverage**: $COVERAGE" >> $GITHUB_STEP_SUMMARY

          # Coverage by file
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Coverage by File" >> $GITHUB_STEP_SUMMARY
          echo "| File | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|" >> $GITHUB_STEP_SUMMARY

          lcov --list coverage/lcov.info | grep -E "\.dart" | head -10 | while read line; do
            file=$(echo $line | awk '{print $1}' | sed 's|.*/||')
            coverage=$(echo $line | awk '{print $2}')
            echo "| $file | $coverage |" >> $GITHUB_STEP_SUMMARY
          done

      - name: 📤 Upload coverage to Codecov
        if: env.CODECOV_TOKEN
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # ⚡ Performance Benchmarks
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: ⚡ Run performance tests
        run: |
          echo "## ⚡ Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create a simple benchmark script
          cat > benchmark_test.dart << 'EOF'
          import 'dart:io';
          import 'package:weight_scale/protocol.dart';

          void main() {
            final stopwatch = Stopwatch()..start();
            
            // Benchmark protocol parsing
            final sampleData = [0x01, 0x02, 0x30, 0x2B, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x6B, 0x67, 0x58, 0x03, 0x04, 0x30];
            
            for (int i = 0; i < 10000; i++) {
              try {
                ScaleProtocol.parseData(sampleData);
              } catch (e) {
                // Expected for sample data
              }
            }
            
            stopwatch.stop();
            print('Protocol parsing (10k iterations): ${stopwatch.elapsedMilliseconds}ms');
          }
          EOF

          # Run benchmark
          dart benchmark_test.dart > benchmark_results.txt 2>&1 || true

          if [ -f benchmark_results.txt ]; then
            echo "### 🚀 Benchmark Results" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            cat benchmark_results.txt >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi

  # 📈 Package Health Check
  package_health:
    name: 📈 Package Health
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 📈 Package health analysis
        run: |
          echo "## 📈 Package Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check pub.dev readiness
          dart pub publish --dry-run > pub_check.txt 2>&1 || true

          if grep -q "Package validation found no issues" pub_check.txt; then
            echo "✅ **pub.dev Ready**: Yes" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **pub.dev Ready**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi

          # Check documentation coverage
          DOCUMENTED=$(grep -r "///" lib --include="*.dart" | wc -l)
          PUBLIC_APIS=$(grep -r "^\s*[a-zA-Z].*(" lib --include="*.dart" | grep -v "^[[:space:]]*//\|^[[:space:]]*\*" | wc -l)

          if [ $PUBLIC_APIS -gt 0 ]; then
            DOC_COVERAGE=$(echo "scale=1; $DOCUMENTED * 100 / $PUBLIC_APIS" | bc -l)
            echo "📚 **Documentation Coverage**: ${DOC_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          fi

          # Check dependencies freshness
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Dependencies Status" >> $GITHUB_STEP_SUMMARY
          flutter pub outdated --json > outdated.json || true

          if [ -f outdated.json ]; then
            echo "Dependencies analysis completed" >> $GITHUB_STEP_SUMMARY
          fi

  # 📋 Quality Summary
  quality_summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [code_quality, test_coverage, performance, package_health]
    if: always()

    steps:
      - name: 📋 Generate Quality Dashboard
        run: |
          echo "## 🏆 Quality Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Status badges
          if [ "${{ needs.code_quality.result }}" = "success" ]; then
            echo "![Code Quality](https://img.shields.io/badge/Code%20Quality-✅%20Pass-green)" >> $GITHUB_STEP_SUMMARY
          else
            echo "![Code Quality](https://img.shields.io/badge/Code%20Quality-❌%20Fail-red)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test_coverage.result }}" = "success" ]; then
            echo "![Test Coverage](https://img.shields.io/badge/Test%20Coverage-✅%20Pass-green)" >> $GITHUB_STEP_SUMMARY
          else
            echo "![Test Coverage](https://img.shields.io/badge/Test%20Coverage-❌%20Fail-red)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance.result }}" = "success" ]; then
            echo "![Performance](https://img.shields.io/badge/Performance-✅%20Pass-green)" >> $GITHUB_STEP_SUMMARY
          else
            echo "![Performance](https://img.shields.io/badge/Performance-❌%20Fail-red)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.package_health.result }}" = "success" ]; then
            echo "![Package Health](https://img.shields.io/badge/Package%20Health-✅%20Pass-green)" >> $GITHUB_STEP_SUMMARY
          else
            echo "![Package Health](https://img.shields.io/badge/Package%20Health-❌%20Fail-red)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated on**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
